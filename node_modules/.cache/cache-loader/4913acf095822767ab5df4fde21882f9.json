{"remainingRequest":"/Users/xiaohaoli/.config/yarn/global/node_modules/babel-loader/lib/index.js?{\"presets\":[\"/Users/xiaohaoli/.config/yarn/global/node_modules/@vue/babel-preset-app/index.js\"]}!/Users/xiaohaoli/.config/yarn/global/node_modules/vue-loader/lib/selector.js?type=script&index=0!/Users/xiaohaoli/Documents/wdi/phaser_vue_fast/Pacman.vue","dependencies":[{"path":"/Users/xiaohaoli/Documents/wdi/phaser_vue_fast/Pacman.vue","mtime":1521123174306},{"path":"/Users/xiaohaoli/.config/yarn/global/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/xiaohaoli/.config/yarn/global/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/xiaohaoli/.config/yarn/global/node_modules/vue-loader/lib/selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.for-each\";\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable no-unused-vars */\nimport 'pixi';\nimport 'p2';\nimport Phaser from 'phaser';\nimport Pacman from './lib/Pacman';\nimport Blinky from './lib/Blinky';\nimport { DIRECTIONS } from './lib/Const';\nimport Swipe from 'phaser-swipe';\n/* eslint-enable no-unused-vars */\n\nexport default {\n  name: 'pacman',\n  props: {\n    width: Number,\n    height: Number\n  },\n  data: function data() {\n    return {\n      pacman: null,\n      cursor: null,\n      map: null,\n      layer: null,\n      lastPressed: null,\n      score: 0\n    };\n  },\n  mounted: function mounted() {\n    this.newGame();\n  },\n  methods: {\n    preload: function preload() {\n      //   this.game.load.spritesheet('dot', './pacman/dot.png')\n      this.a = this.game.load.spritesheet('pacman', '~./static/pacman/pacman.png', 24, 24); //   this.game.load.image('tiles', './pacman/pacman-tiles.png')\n      //   this.game.load.image('door', './pacman/door.png')\n      //   this.game.load.tilemap('map', './pacman/pacman-map.json', null, Phaser.Tilemap.TILED_JSON)\n      //   this.game.load.audio('chomp', './pacman/pacman_chomp.wav')\n      //   this.game.load.audio('die', './pacman/Pacman-death-sound.mp3')\n    },\n    create: function create(phaser) {\n      console.log(this.a);\n      this.game.add.sprite(200, 200, 'pacman'); //   this.swipe = new Swipe(this.game)\n      //   this.pacman = new Pacman({\n      //       game: this.game,\n      //       x: 22,\n      //       y: 22,\n      //       asset: 'pacman'\n      //   })\n      //   this.blinky = new Blinky({\n      //       game: this.game,\n      //       x: 50,\n      //       y: 22,\n      //       asset: 'pacman'\n      //   })\n      //   // add the map\n      //   this.map = this.game.add.tilemap('map')\n      //   this.map.addTilesetImage('pacman-tiles', 'tiles')\n      //   this.map.addTilesetImage('door', 'door')\n      //   this.layer = this.map.createLayer('Pacman')\n      //   this.layer.resizeWorld()\n      //   this.dots = this.game.add.physicsGroup()\n      //   // add the dot\n      //   this.map.createFromTiles(7, 14, 'dot', this.layer, this.dots)\n      //   this.dots.setAll('x', 6, false, false, 1)\n      //   this.dots.setAll('y', 6, false, false, 1)\n      //   this.map.setCollisionByExclusion([14], true, this.layer)\n      //   this.game.add.existing(this.pacman)\n      //   this.game.add.existing(this.blinky)\n      //   this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL\n      //   this.game.scale.setShowAll()\n      //   this.game.scale.maxHeight = 496\n      //   this.game.scale.maxWidth = 448\n      //   window.addEventListener(\n      //       'resize', () => {\n      //           this.game.scale.refresh()\n      //       }\n      //   )\n      //   this.game.scale.refresh()\n      //   this.cursors = this.game.input.keyboard.createCursorKeys()\n      //   // this.$store.dispatch('notLoading')\n    },\n    update: function update(phaser) {//   let direction = this.swipe.check()\n      //   if (direction !== null) {\n      //       // direction= { x: x, y: y, direction: direction }\n      //       switch (direction.direction) {\n      //           case this.swipe.DIRECTION_LEFT:\n      //               this.pacman.go(DIRECTIONS.LEFT)\n      //               break\n      //           case this.swipe.DIRECTION_RIGHT:\n      //               this.pacman.go(DIRECTIONS.RIGHT)\n      //               break\n      //           case this.swipe.DIRECTION_UP:\n      //               this.pacman.go(DIRECTIONS.UP)\n      //               break\n      //           case this.swipe.DIRECTION_DOWN:\n      //               this.pacman.go(DIRECTIONS.DOWN)\n      //               break\n      //           case this.swipe.DIRECTION_UP_LEFT:\n      //               break\n      //           case this.swipe.DIRECTION_UP_RIGHT:\n      //               break\n      //           case this.swipe.DIRECTION_DOWN_LEFT:\n      //               break\n      //           case this.swipe.DIRECTION_DOWN_RIGHT:\n      //               break\n      //       }\n      //   }\n      //   this.game.physics.arcade.collide(this.pacman, this.layer, this.collide, null, this)\n      //   this.game.physics.arcade.collide(this.blinky, this.layer)\n      //   this.game.physics.arcade.overlap(this.pacman, this.dots, this.eatDot, null, this)\n      //   this.game.physics.arcade.overlap(this.pacman, this.blinky, this.die, null, this)\n    },\n    render: function render(phaser) {},\n    eatDot: function eatDot(pacman, dot) {\n      this.score += 100;\n      dot.kill();\n    },\n    collide: function collide() {// console.log('collide')\n    },\n    die: function die(pacman, blinky) {\n      pacman.died = true;\n      pacman.body.velocity.x = 0;\n      pacman.body.velocity.y = 0;\n      pacman.animations.play('die', 10, false);\n\n      if (!pacman.dieSound.isPlaying) {\n        pacman.dieSound.play();\n      }\n\n      pacman.animations.currentAnim.onComplete.add(function () {\n        return pacman.kill();\n      }, this);\n    },\n    newGame: function newGame() {\n      this.$store.dispatch('initGame', {\n        width: 448,\n        height: 496,\n        el: this.$el,\n        preload: this.preload,\n        create: this.create,\n        update: this.update,\n        render: this.render\n      });\n    },\n    resetGame: function resetGame() {\n      this.dots.hash.forEach(function (dot) {\n        dot.reset(dot.position.x, dot.position.y);\n      });\n      this.pacman.reset(22, 22);\n      this.pacman.body.velocity.x = 0;\n      this.pacman.body.velocity.y = 0;\n      this.pacman.lastPressed = null;\n      this.pacman.died = false;\n      this.pacman.play('stop');\n    }\n  },\n  watch: {\n    loading: function loading(not) {\n      if (not) {\n        this.newGame();\n      } else {\n        this.$store.dispatch('destroyGame');\n      }\n    }\n  },\n  computed: {\n    game: function game() {\n      return this.$store.getters.game;\n    },\n    loading: function loading() {\n      return this.$store.getters.loading;\n    }\n  }\n};",{"version":3,"sources":["Pacman.vue"],"names":[],"mappings":";;;;;;AAOA;;AACA;OACA;OACA;mBACA;mBACA;mBACA;2BACA;kBACA;;;AAEA;QAEA;;WAEA;YACA,AACA;AAHA;wBAIA;;cAEA;cACA;WACA;aACA;mBACA;aACA,AACA;AAPA;AAQA;8BACA;SACA;AACA;;gCAEA;AAEA;uFACA,KACA;AACA;AACA;AACA;AACA;AACA;oCACA;uBACA;qCACA,WACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;oCACA,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;oCACA,CACA;yCACA;oBACA;UACA;AACA;gCACA,CACA;AACA;sCACA;oBACA;+BACA;+BACA;wCACA;;sCACA;wBACA;AACA;;;;SACA;AACA;gCACA;;eAEA;gBACA;iBACA;sBACA;qBACA;qBACA;qBACA,AACA;AARA;AASA;oCACA;4CACA;+CACA;AACA;4BACA;oCACA;oCACA;gCACA;yBACA;uBACA;AACA,AACA;AAxIA;;mCA0IA;eACA;aACA;aACA;6BACA;AACA;AACA,AACA;AARA;;0BAUA;iCACA;AACA;gCACA;iCACA;AACA,AACA;AAPA;AArKA","sourceRoot":".","sourcesContent":["<template>\n    <div id='gameScreen'>\n      <button @click=\"resetGame\">reset</button>\n    </div>\n</template>\n\n<script>\n  /* eslint-disable no-unused-vars */\n  import 'pixi'\n  import 'p2'\n  import Phaser from 'phaser'\n  import Pacman from './lib/Pacman'\n  import Blinky from './lib/Blinky'\n  import { DIRECTIONS } from './lib/Const'\n  import Swipe from 'phaser-swipe'\n  /* eslint-enable no-unused-vars */\n\nexport default {\n      name: 'pacman',\n      props: {\n          width: Number,\n          height: Number\n      },\n      data () {\n          return {\n              pacman: null,\n              cursor: null,\n              map: null,\n              layer: null,\n              lastPressed: null,\n              score: 0\n          }\n      },\n      mounted () {\n          this.newGame()\n      },\n      methods: {\n          preload () {\n            //   this.game.load.spritesheet('dot', './pacman/dot.png')\n\n            this.a = this.game.load.spritesheet('pacman', '~./static/pacman/pacman.png', 24, 24)\n            //   this.game.load.image('tiles', './pacman/pacman-tiles.png')\n            //   this.game.load.image('door', './pacman/door.png')\n            //   this.game.load.tilemap('map', './pacman/pacman-map.json', null, Phaser.Tilemap.TILED_JSON)\n            //   this.game.load.audio('chomp', './pacman/pacman_chomp.wav')\n            //   this.game.load.audio('die', './pacman/Pacman-death-sound.mp3')\n          },\n          create (phaser) {\n              console.log(this.a)\n              this.game.add.sprite(200, 200, 'pacman');\n            //   this.swipe = new Swipe(this.game)\n            //   this.pacman = new Pacman({\n            //       game: this.game,\n            //       x: 22,\n            //       y: 22,\n            //       asset: 'pacman'\n            //   })\n\n            //   this.blinky = new Blinky({\n            //       game: this.game,\n            //       x: 50,\n            //       y: 22,\n            //       asset: 'pacman'\n            //   })\n            //   // add the map\n            //   this.map = this.game.add.tilemap('map')\n            //   this.map.addTilesetImage('pacman-tiles', 'tiles')\n            //   this.map.addTilesetImage('door', 'door')\n\n            //   this.layer = this.map.createLayer('Pacman')\n            //   this.layer.resizeWorld()\n\n            //   this.dots = this.game.add.physicsGroup()\n\n            //   // add the dot\n            //   this.map.createFromTiles(7, 14, 'dot', this.layer, this.dots)\n\n            //   this.dots.setAll('x', 6, false, false, 1)\n            //   this.dots.setAll('y', 6, false, false, 1)\n\n            //   this.map.setCollisionByExclusion([14], true, this.layer)\n\n            //   this.game.add.existing(this.pacman)\n            //   this.game.add.existing(this.blinky)\n\n            //   this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL\n            //   this.game.scale.setShowAll()\n            //   this.game.scale.maxHeight = 496\n            //   this.game.scale.maxWidth = 448\n            //   window.addEventListener(\n            //       'resize', () => {\n            //           this.game.scale.refresh()\n            //       }\n            //   )\n            //   this.game.scale.refresh()\n\n            //   this.cursors = this.game.input.keyboard.createCursorKeys()\n            //   // this.$store.dispatch('notLoading')\n          },\n          update (phaser) {\n            //   let direction = this.swipe.check()\n            //   if (direction !== null) {\n            //       // direction= { x: x, y: y, direction: direction }\n            //       switch (direction.direction) {\n            //           case this.swipe.DIRECTION_LEFT:\n            //               this.pacman.go(DIRECTIONS.LEFT)\n            //               break\n            //           case this.swipe.DIRECTION_RIGHT:\n            //               this.pacman.go(DIRECTIONS.RIGHT)\n            //               break\n            //           case this.swipe.DIRECTION_UP:\n            //               this.pacman.go(DIRECTIONS.UP)\n            //               break\n            //           case this.swipe.DIRECTION_DOWN:\n            //               this.pacman.go(DIRECTIONS.DOWN)\n            //               break\n            //           case this.swipe.DIRECTION_UP_LEFT:\n            //               break\n            //           case this.swipe.DIRECTION_UP_RIGHT:\n            //               break\n            //           case this.swipe.DIRECTION_DOWN_LEFT:\n            //               break\n            //           case this.swipe.DIRECTION_DOWN_RIGHT:\n            //               break\n            //       }\n            //   }\n            //   this.game.physics.arcade.collide(this.pacman, this.layer, this.collide, null, this)\n            //   this.game.physics.arcade.collide(this.blinky, this.layer)\n            //   this.game.physics.arcade.overlap(this.pacman, this.dots, this.eatDot, null, this)\n            //   this.game.physics.arcade.overlap(this.pacman, this.blinky, this.die, null, this)\n          },\n          render (phaser) {\n          },\n          eatDot (pacman, dot) {\n              this.score += 100\n              dot.kill()\n          },\n          collide () {\n              // console.log('collide')\n          },\n          die (pacman, blinky) {\n              pacman.died = true\n              pacman.body.velocity.x = 0\n              pacman.body.velocity.y = 0\n              pacman.animations.play('die', 10, false)\n              if (!pacman.dieSound.isPlaying) {\n                  pacman.dieSound.play()\n              }\n              pacman.animations.currentAnim.onComplete.add(() => pacman.kill(), this)\n          },\n          newGame () {\n              this.$store.dispatch('initGame', {\n                  width: 448,\n                  height: 496,\n                  el: this.$el,\n                  preload: this.preload,\n                  create: this.create,\n                  update: this.update,\n                  render: this.render\n              })\n          },\n          resetGame () {\n              this.dots.hash.forEach(dot => {\n                  dot.reset(dot.position.x, dot.position.y)\n              })\n              this.pacman.reset(22, 22)\n              this.pacman.body.velocity.x = 0\n              this.pacman.body.velocity.y = 0\n              this.pacman.lastPressed = null\n              this.pacman.died = false\n              this.pacman.play('stop')\n          }\n      },\n      watch: {\n          loading (not) {\n              if (not) {\n                  this.newGame()\n              } else {\n                  this.$store.dispatch('destroyGame')\n              }\n          }\n      },\n      computed: {\n          game () {\n              return this.$store.getters.game\n          },\n          loading () {\n              return this.$store.getters.loading\n          }\n      }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n// @import '../../assets/sass/tools';\n\n.dashboard {\n    background: transparent;\n}\n\n#gameScreen {\n    width: 100%;\n    height: 100%;\n    margin: auto;\n}\n</style>\n"]}]}